{"categories":[{"title":"ACM","uri":"https://coder-liuu.github.io/categories/acm/"},{"title":"默认分类","uri":"https://coder-liuu.github.io/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"}],"posts":[{"content":"最近使用Manjaro-Gnome系统已经快过去2年了，好多使用过的软件已经忘了，最近也打算重装系统，于是准备总结一下自己常用和好用的软件，以此记录，给自己和以后需要的人。\ngoogle-chrome 浏览器 浏览器是上网的必备，没有浏览器电脑的意义也就少了些许。\n安装：sudo pacman -S google-chrome\nTim 聊天软件 身为国人QQ，乃是必备。 安装：sudo pacman -S deepin.com.qq.im\nWps 常用办公软件 在线苦逼大学生写论文做PPT需要\n安装：sudo pacman -S wps-office\nnautilus 文件管理器 类似于Windows下的资源管理器，自带工具，无需安装\n安装：sudo pacman -S nautilus\n他的孪生兄弟thunar与他相似\n安装：sudo pacman -S thunar\nfoxit PDF阅读器 科研狗或喜欢看电子书必备软件，功能强大\n安装：sudo pacman -S foxit\nvscode 代码编辑器 强大且配置简单的无敌编辑器\n安装：sudo pacman -S code\npicgo 图床软件 以前使用在线图床过了一年图都消失啊，于是经过一番搜索发现了这个基于gitee的图床 官网：https://github.com/Molunerfinn/PicGo\n安装：yay -S picgo-appimage\n配置方式：TODO\nqv2ray 科学上网软件 科学上网你懂得～ 安装：sudo pacman -S qv2ray 图片就不放了\n网易云音乐（非官方客户端） 官方的网易云音乐在linux下有一个缺点就是在搜索框中不能输入中文，无奈之下找到了这个替代品\n安装：sudo pacman -S electron-netease-cloud-music\nxmind 思维导图 工程必备，思维导图，安装的使用需要snap来安装\n安装：https://snapcraft.io/install/xmind/manjaro\nfilezilila FTP传输软件 苦逼大学生使用FTP交作业\n安装：sudo pacman -S filezilila\ncpolar内网穿透软件 想将本地端口映射到域名地址，想在局域网外SSH链接电脑，这个软件就是这个作用\n官网：https://www.cpolar.com/\n安装：官网下载\nnavicat 数据库可视化软件 以excel方式查看数据库的数据集，老好用了，缺点就是只能免费用15天\n官网：https://www.navicat.com.cn/\n安装：官网下载\ndmenu 快速启动软件 快速启动一个软件\n安装：sudo pacman -S dmenu\nwine 模拟window软件 安装：sudo pacman -S wine\nfish 下载百度文库软件 苦逼大学生必备,linux需要用wine才能打开\n下载Fish.zip密码：i1ui\ntmux 终端复用软件 这个大名鼎鼎的终端复用软件，就不必多说了。\n安装：sudo pacman -S tmux\nranger 终端下的文件管理器 终端党必备，终端下的文件管理器\n安装：sudo pacman -S ranger\nzsh 好用的shell命令解释器 bash的进阶，具有自动补全，提示，扩展性更高。\n安装：sudo pacman -S zsh\nneovim 文本编辑软件 vim爱好者的终端下编辑器\n安装：sudo pacman -S neovim\nfzf 模糊搜索工具 通过文件名字，快速搜索一个文件\n安装：sudo pacman -S fzf\nag 代码搜索工具 在众多代码文件中搜索，某个变量\n安装：sudo pacman -S the_silver_searcher\n","id":0,"section":"posts","summary":"最近使用Manjaro-Gnome系统已经快过去2年了，好多使用过的软件已经忘了，最近也打算重装系统，于是准备总结一下自己常用和好用的软件，","tags":null,"title":"Manjaro常用软件","uri":"https://coder-liuu.github.io/2021/01/manjaro-softwork/","year":"2021"},{"content":"个人认为这部分的数论中的基础，刚刚有查了查蓝桥杯不考数论，所以这篇博客的数论知识都是一些基础知识。准备蓝桥杯还是好好学学动态规划和图论吧!\n质数 质数概念: 从2开始，只包含1和本身的约数，又称素数。\n性质: 若有n整除d，则n整除d/n $$ d | n \\rightarrow \\frac{d}{n} | n $$\n1-试除法判断质数模板 bool is_prime(int n){ if(n \u0026lt; 2) return false; for(int i = 2; i \u0026lt;= n / i; i++){ if(n % i == 0) return false; } return true; }  2-分解质因数(求一个数的所有质因数) void divide(int n){ for(int i = 2; i \u0026lt;= n / i; i++){ if(n % i == 0){ int s = 0; while(n % i == 0)n /= i,s++; // i 是底数，s是指数(有多少个i) cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; s \u0026lt;\u0026lt; endl; } } if(n \u0026gt; 1) cout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026quot; \u0026quot; \u0026lt;\u0026lt; 1 \u0026lt;\u0026lt; endl; }  3-筛素数(判断1-n之间有多少个素数) 普通方法:枚举1-(n-1)来看看是否能筛掉n这个数\nvoid get_primes(int n){ for(int i = 2; i \u0026lt;= n ;i++){ if(st[i] == false){ ans++; } for(int j = i + i; j \u0026lt;= n; j+=i){ st[j] = true; } } }  埃氏方法:枚举1-(n-1)中的质数来看看是否能筛掉n这个数\nvoid get_primes(int n){ for(int i = 2; i \u0026lt;= n ;i++){ if(st[i] == false){ ans++; for(int j = i + i; j \u0026lt;= n; j+=i){ st[j] = true; } } } }  线性方法:使用n的最小质因数来筛掉n\nvoid get_primes(int n){ for(int i = 2; i \u0026lt;= n ;i++){ if(!st[i]) primes[ans++] = i; for(int j = 0; primes[j] \u0026lt;= n / i; j++){ st[primes[j] * i] = true; if(i % primes[j] == 0) break; } } }  4-试除法求约数 vector\u0026lt;int\u0026gt; get_divisors(int x) { vector\u0026lt;int\u0026gt; res; for (int i = 1; i \u0026lt;= x / i; i ++ ) if (x % i == 0) { res.push_back(i); if (i != x / i) res.push_back(x / i); } sort(res.begin(), res.end()); return res; }  5-约数相关公式 如果约数: $ N = p_{1}^{a1} * p_{2}^{a2} *\u0026hellip;* p_{k}^{ak} $\n约数个数: $ (a_{1} + 1) * (a_{2} + 2) * \u0026hellip; * (a_{k} + 1)$\n约数之和: $ (p_{1}^0 +p_{1}^1 +\u0026hellip; +p_{1}^{a1}) * \u0026hellip; * (p_{k}^0 +p_{k}^1 +\u0026hellip; +p_{k}^{ak}) $\n6-欧几里得算法(辗转相除法求最小公因数) int gcd(int a,int b){ return b ? gcd(b,a % b):a; }  7-求欧拉函数 定义: 1-N中于N互质的个数被称为欧拉函数，记为$ \\phi(N)$\n如果约数: $ N = p_{1}^{a1} * p_{2}^{a2} *\u0026hellip;* p_{k}^{ak} $\n求法: $ \\phi(N) = N * (1 - \\frac{1}{p_1}) * (1 - \\frac{1}{p_2}) * \u0026hellip; * (1 - \\frac{1}{p_k}) $\n8-筛法求欧拉函数 通过线性筛求很多欧拉函数\nint primes[N], cnt; // primes[]存储所有素数 int euler[N]; // 存储每个数的欧拉函数 bool st[N]; // st[x]存储x是否被筛掉 void get_eulers(int n) { euler[1] = 1; for (int i = 2; i \u0026lt;= n; i ++ ) { if (!st[i]) { primes[cnt ++ ] = i; euler[i] = i - 1; } for (int j = 0; primes[j] \u0026lt;= n / i; j ++ ) { int t = primes[j] * i; st[t] = true; if (i % primes[j] == 0) { euler[t] = euler[i] * primes[j]; break; } euler[t] = euler[i] * (primes[j] - 1); } } }  9-快速幂 求$m^k \\mod p$ 时间复杂度logk\nLL f(LL a,LL b,LL p){ LL res = 1; while(b){ if(b \u0026amp; 1) res = (res * a) % p; a = (a * a) % p; b\u0026gt;\u0026gt;=1; } return res % p; }  ","id":1,"section":"posts","summary":"个人认为这部分的数论中的基础，刚刚有查了查蓝桥杯不考数论，所以这篇博客的数论知识都是一些基础知识。准备蓝桥杯还是好好学学动态规划和图论吧! 质","tags":null,"title":"ACM数论","uri":"https://coder-liuu.github.io/2021/01/acm-math/","year":"2021"},{"content":"一、 用Python第三方库virtualenv创建虚拟环境 这种方式是最原始最简单的一种方式.个人经常使用\n1. 安装方式 pip install virtualenv # python2 pip3 install virtualenv # python3  2.创建虚拟环境 virtualenv [虚拟环境的名字]  .notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip{background:#e6f9e6}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:0.125em;position:relative} Tip\n这个虚拟环境会在你所在的目录生成，这里建议将所有的虚拟环境放在同一个目录下，容易管理\n 3.进入退出虚拟环境 linux进入虚拟环境 source /path/to/virtualenv/bin/activate\nlinux退出虚拟环境 deactivate\n4.安装所需的第三方库 当你进入虚拟环境，使用方式和pip的使用方法就都是一样的了。例如安装numpy库就是这样的命令pip3 install numpy\n二、用Anaconda创建虚拟环境 这种方式是的优点是自动管理虚拟环境的目录，缺点就是安装的时候有点慢。 Warning\nconda是Anaconda里的一个工具，只有安装了Anaconda才会有的。\n 1. 创建虚拟环境 conda create -n ENV python==3.6  2. 激活/退出虚拟环境 激活虚拟环境 conda activate ENV\n退出虚拟环境 conda deactivate\n3. 安装所需的第三方库 conda install -n ENV [package]\n4. 查看conda环境下所有的虚拟环境 conda info --envs\n参考博客 https://www.cnblogs.com/shyern/p/11284127.html\nhttps://www.cnblogs.com/shuaiyin/p/10922467.html\n","id":2,"section":"posts","summary":"一、 用Python第三方库virtualenv创建虚拟环境 这种方式是最原始最简单的一种方式.个人经常使用 1. 安装方式 pip install virtualenv # python2 pip3 install virtualenv # python3 2.创","tags":null,"title":"Python-创建虚拟环境","uri":"https://coder-liuu.github.io/2020/04/python-create-vir/","year":"2020"},{"content":"最常用篇   初始化git仓库 git init\n  添加修改 git add .\n  删除git仓库,只需要删除本地的文件就可以了 rm -rf .git\n  查看当前仓库的状态 git status\n  丢弃工作区的改动 git restore \u0026lt;文件\u0026gt;\n  回滚撤回提交操作 git reset\n  告诉Git你是谁 git config --global user.name \u0026quot;Liu Yang\u0026quot;\n  提交东西 git commit -m \u0026quot;some describle\u0026quot; 如果这时候没有-m 和后面的东西将进入一个界面然后可以继续写自己的描述，修改后自动被提交\n  .notice{padding:18px;line-height:24px;margin-bottom:24px;border-radius:4px;color:#444;background:#e7f2fa}.notice p:last-child{margin-bottom:0}.notice-title{margin:-18px -18px 12px;padding:4px 18px;border-radius:4px 4px 0 0;font-weight:700;color:#fff;background:#6ab0de}.notice.warning .notice-title{background:rgba(217,83,79,.9)}.notice.warning{background:#fae2e2}.notice.info .notice-title{background:#f0b37e}.notice.info{background:#fff2db}.notice.note .notice-title{background:#6ab0de}.notice.note{background:#e7f2fA}.notice.tip .notice-title{background:rgba(92,184,92,.8)}.notice.tip{background:#e6f9e6}.icon-notice{display:inline-flex;align-self:center;margin-right:8px}.icon-notice img,.icon-notice svg{height:1em;width:1em;fill:currentColor}.icon-notice img,.icon-notice.baseline svg{top:0.125em;position:relative} Tip\ngit commit \u0026ndash;amend 可以将这次提交追加到上一次提交中去，减少不必要的提交\n   配置默认编辑器git config --global core.editor nvim\n  让Git忽略一些东西，不被追踪 首先先新建一个文件.gitignore，然后将要忽略的文件写在上面就好了\n  让Git停止跟踪一个文件 git rm --cached ×××××\n  Git回滚篇   查看日志 git log\n  回滚到指定版本 git reset --hard id\n  回滚后看全部的历史提交记录 git reflog\n  删除git commit记录 git rebase -i xxxxxx(提交记录id),然后进入一个vim界面，把想删除的pick,改成drop保存退出，提交记录就没有了\n  高级篇   列出本地分支 git branch\n  添加一个分支 git branch xx(xx为分支名)\n  切换分支 git checkout xx(xx为分支名)\n  合并分支 git merge xx(xx为分支名)\n  添加远程仓库 git remote add origin xxx(xxx为网址)\n  解除远程仓库 git remote remove origin\n  提交到远程仓库里 git push --set-upstream origin master (!!! 本地至少的提交一次)\n  克隆仓库 git clone xxx(xxx为网址)\n  让Git记住你的帐号密码 git config credential.helper store\n  更新仓库,别人帮你做过修改，然后来更新自己的本地文件 git pull\n  在Github仓库的设置中可以邀请伙伴一起完成项目。\n  Git 查看自己的远程仓库git remote -v\n  推荐教程 猴子教程 官方的中文文档\n","id":3,"section":"posts","summary":"最常用篇 初始化git仓库 git init 添加修改 git add . 删除git仓库,只需要删除本地的文件就可以了 rm -rf .git 查看当前仓库的状态 git status 丢弃工作区的改动 git restore \u0026lt","tags":null,"title":"Git命令总结","uri":"https://coder-liuu.github.io/2020/04/git-summary/","year":"2020"}],"tags":[]}